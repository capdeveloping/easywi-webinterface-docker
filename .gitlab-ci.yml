---

stages:
  - build-container
  - pre-push
  - push

.default:
  image: docker:latest
  before_script:
    - export VERSION=$(grep -iE "installer_version" Dockerfile | cut -d " " -f3)
    - export datestr=`date '+%Y%m%d'`

test build:
  extends: .default
  stage: build-container
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:test-$VERSION.$datestr" .
  except:
    - master

# This file is a template, and might need editing before it works on your project.
push to github repo:
  stage: push
  image: debian:stable-slim
  extends: .default
  rules:
    - if: $AUTO_BUILD == "false" && $CI_COMMIT_BRANCH == "master"
  script:
    - apt update -y && apt install git -y
    - export UPDATE_GIT_URL="git remote set-url public-repo $GITHUB_URL"
    - export ADD_GIT_URL="git remote add public-repo $GITHUB_URL"
    - if [ `git remote | grep public-repo` == "public-repo" ]; then $UPDATE_GIT_URL; else $ADD_GIT_URL; fi
    - git push public-repo HEAD:master

clean up docker test images:
  # Official docker image.
  stage: pre-push
  extends: .default
  script:
    - docker image rm "$CI_REGISTRY_IMAGE:test-$VERSION" &> /dev/null || true
  only:
    - master

push to docker hub:
  # Official docker image.
  stage: push
  before_script:
    - !reference [.default, before_script]
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build . -t "$CI_REGISTRY_IMAGE:latest" -t "$CI_REGISTRY_IMAGE:$VERSION.$datestr"
    - docker push "$CI_REGISTRY_IMAGE" --all-tags
    - docker image rm "$CI_REGISTRY_IMAGE:latest"
    - docker image rm "$CI_REGISTRY_IMAGE:$VERSION.$datestr"
  only:
    - master
